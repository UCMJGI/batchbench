executor {
    name = 'lsf'
    // to accommodate 384 well plates
    queueSize = 400
    // https://www.nextflow.io/docs/latest/executor.html#lsf
    perJobMemLimit = true
}

process {
  cpus   =  1
  memory =  8.GB
  queue = 'normal'
  errorStrategy = 'ignore'
  maxRetries = 2
  maxErrors = -1

  withLabel: long_running {
    queue = 'long'
  }

  withName: get_datasets {
    memory = 2.GB 
  }
  withName: QC_h5ad {
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    memory = { 40.GB + 8.GB * (task.attempt - 1) }
  }
  withName: QC_rds {
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    memory = { 40.GB + 8.GB * (task.attempt - 1) }
  }
  withName: py_bbknn {
    memory =  10.GB
  }
  withName: py_scanorama{
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    memory = { 40.GB + 8.GB * (task.attempt - 1) }
  }
  withName: R_harmony{
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    memory = { 15.GB + 8.GB * (task.attempt - 1) }    
  }
  withName: R_limma{
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    memory = { 30.GB + 8.GB * (task.attempt - 1) }  
}
  withName: R_combat{
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    memory = { 45.GB + 8.GB * (task.attempt - 1) }
  }
//  withName: R_Seurat_v2_multiCCA{
//    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
//    memory = { 50.GB + 8.GB * (task.attempt - 1) }  
//  }
  withName: R_Seurat_v3_anchors{
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    memory = { 50.GB + 8.GB * (task.attempt - 1) }
  }
  withName: R_mnnCorrect{
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    memory = { 50.GB + 8.GB * (task.attempt - 1) }
  }

withName: R_fastMNN{
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    memory = { 20.GB + 8.GB * (task.attempt - 1) }
  }

  withName: R_entropy_before{
    memory = 30.GB
  }
  withName: R_entropy {
    errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
    memory = { 50.GB + 8.GB * (task.attempt - 1) }
  }
//  withName: py_distances{
//    memory = 16.GB
//  }
//  withName: R_distance_before {
//    memory = 35.GB
//  }
//  withName: R_distance_after {
//  errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
//      memory = { 50.GB + 8.GB * (task.attempt - 1) }
//  }
  
  withName: py_entropy {
  errorStrategy = { task.exitStatus == 130 && task.attempt <= process.maxRetries ? 'retry' : 'ignore' }
  memory = { 20.GB + 8.GB * (task.attempt - 1) }
  }
  withName: py_UMAP {
    memory = 16.GB
  }
  withName: R_UMAP {
  memory = 16.GB
  }
}

