profiles {
	docker {
		docker.enabled = true
		process { container = 'quay.io/cellgeni/batchbench:v0.17'}
	}
	
	local {
		process.executor = 'local'
		executor {
		    name = 'local'
		    cpus = 24
		    memory = 270.GB
		}

		process {
			 cpus   =  1
			 memory =  8.GB
			 queue = 'normal'
			 errorStrategy = 'ignore'
			 maxRetries = 4
			 maxErrors = -1
			
			 withLabel: long_running {queue = 'long'}
			}
  		}
	}
params{
	data_dir="${baseDir}/test_data"
	dataset_list="${baseDir}/metadata/dataset_list.txt"
	output_dir="${baseDir}/results"
	
	// object related params
	batch_key = 'Batch'
	celltype_key = 'cell_type1'
	assay_name = "logcounts"
	corrected_assay = "corrected"
	corrected_emb = "corrected_emb"
	 
	//get_datasets{}
	
	QC_rds{
		batch_thres = 0.05 // Minimum proportion of total cells for a batch to be considered.
		celltype_thres = 0.01 // Minimum proportion of total cells for a cell type to be considered
		min_genes = 200 // Min number of genes expressed per cell. 
		min_cells = 3 // Min number of cells for a gene to be expressed in.
	}

	//h5ad2sce{}
	
	BBKNN{
		n_pcs = 25
		n_neighbours = 10
	}
	
	//scanorama{}
	
	harmony{
		n_pcs = 25
	}
	
	//Limma{}
	//Combat{}
	
	Seurat_3{
		hvg_method = "dispersion"
		n_features = 2000
		verbose = 'FALSE'
		n_anchors = 30
	}
	
	mnnCorrect{
		k = 30 //number of nearest neighbors to consider when identifying MNNs.
		sigma = 0.1 //numeric scalar specifying the bandwidth of the Gaussian smoothing kernel used to compute the correction vector for each cell.
		cos_norm = "TRUE" //cosine normalization should be performed on the input data prior to calculating distances between cells.
		svd_dim = 2 //number of dimensions to use for summarizing biological substructure within each batch. 
	}
	
	fastMNN{
		k = 30 //number of nearest neighbors to consider when identifying MNNs.
		cos_norm = "TRUE" //cosine normalization should be performed on the input data prior to calculating distances between cells.
		dim_red = 25 //number of dimensions to use for dimensionality reduction.
	}
	
	//rds_to_h5ad_converter{}
	
	R_entropy{
		k_num = 30
		dim_num = 50
	}
	
	Py_entropy{
		n_neighbours = 30
		n_pcs = 50

	}
	
	//clust_SC3{}
	//clust_seurat{}
	//find_markers{}
	Py_UMAP{
		n_neighbours = 30
		n_pcs = 20
	}
}			
